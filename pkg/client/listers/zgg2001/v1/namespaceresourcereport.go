/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zgg2001/PodResourceReport-Controller/pkg/apis/zgg2001/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespaceResourceReportLister helps list NamespaceResourceReports.
// All objects returned here must be treated as read-only.
type NamespaceResourceReportLister interface {
	// List lists all NamespaceResourceReports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NamespaceResourceReport, err error)
	// NamespaceResourceReports returns an object that can list and get NamespaceResourceReports.
	NamespaceResourceReports(namespace string) NamespaceResourceReportNamespaceLister
	NamespaceResourceReportListerExpansion
}

// namespaceResourceReportLister implements the NamespaceResourceReportLister interface.
type namespaceResourceReportLister struct {
	indexer cache.Indexer
}

// NewNamespaceResourceReportLister returns a new NamespaceResourceReportLister.
func NewNamespaceResourceReportLister(indexer cache.Indexer) NamespaceResourceReportLister {
	return &namespaceResourceReportLister{indexer: indexer}
}

// List lists all NamespaceResourceReports in the indexer.
func (s *namespaceResourceReportLister) List(selector labels.Selector) (ret []*v1.NamespaceResourceReport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NamespaceResourceReport))
	})
	return ret, err
}

// NamespaceResourceReports returns an object that can list and get NamespaceResourceReports.
func (s *namespaceResourceReportLister) NamespaceResourceReports(namespace string) NamespaceResourceReportNamespaceLister {
	return namespaceResourceReportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespaceResourceReportNamespaceLister helps list and get NamespaceResourceReports.
// All objects returned here must be treated as read-only.
type NamespaceResourceReportNamespaceLister interface {
	// List lists all NamespaceResourceReports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NamespaceResourceReport, err error)
	// Get retrieves the NamespaceResourceReport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NamespaceResourceReport, error)
	NamespaceResourceReportNamespaceListerExpansion
}

// namespaceResourceReportNamespaceLister implements the NamespaceResourceReportNamespaceLister
// interface.
type namespaceResourceReportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespaceResourceReports in the indexer for a given namespace.
func (s namespaceResourceReportNamespaceLister) List(selector labels.Selector) (ret []*v1.NamespaceResourceReport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NamespaceResourceReport))
	})
	return ret, err
}

// Get retrieves the NamespaceResourceReport from the indexer for a given namespace and name.
func (s namespaceResourceReportNamespaceLister) Get(name string) (*v1.NamespaceResourceReport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("namespaceresourcereport"), name)
	}
	return obj.(*v1.NamespaceResourceReport), nil
}
